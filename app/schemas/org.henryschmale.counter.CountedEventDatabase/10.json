{
  "formatVersion": 1,
  "database": {
    "version": 10,
    "identityHash": "a1b6624ba4859b91d6e54e2488a3cba1",
    "entities": [
      {
        "tableName": "CountedEventType",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`uid` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `event_type_name` TEXT NOT NULL, `event_type_description` TEXT, `createdAt` TEXT, `color` INTEGER NOT NULL DEFAULT 0xFFFFFFFF)",
        "fields": [
          {
            "fieldPath": "uid",
            "columnName": "uid",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "eventTypeName",
            "columnName": "event_type_name",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "eventTypeDescription",
            "columnName": "event_type_description",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "createdAt",
            "columnName": "createdAt",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "color",
            "columnName": "color",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0xFFFFFFFF"
          }
        ],
        "primaryKey": {
          "columnNames": [
            "uid"
          ],
          "autoGenerate": true
        },
        "indices": [
          {
            "name": "index_CountedEventType_event_type_name",
            "unique": true,
            "columnNames": [
              "event_type_name"
            ],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_CountedEventType_event_type_name` ON `${TABLE_NAME}` (`event_type_name`)"
          }
        ],
        "foreignKeys": []
      },
      {
        "tableName": "CountedEvent",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`uid` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `createdAt` TEXT, `countedEventTypeId` INTEGER NOT NULL, `increment` INTEGER NOT NULL, `source` INTEGER, FOREIGN KEY(`countedEventTypeId`) REFERENCES `CountedEventType`(`uid`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "uid",
            "columnName": "uid",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "createdAt",
            "columnName": "createdAt",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "countedEventTypeId",
            "columnName": "countedEventTypeId",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "increment",
            "columnName": "increment",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "source",
            "columnName": "source",
            "affinity": "INTEGER",
            "notNull": false
          }
        ],
        "primaryKey": {
          "columnNames": [
            "uid"
          ],
          "autoGenerate": true
        },
        "indices": [
          {
            "name": "index_CountedEvent_countedEventTypeId",
            "unique": false,
            "columnNames": [
              "countedEventTypeId"
            ],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_CountedEvent_countedEventTypeId` ON `${TABLE_NAME}` (`countedEventTypeId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "CountedEventType",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "countedEventTypeId"
            ],
            "referencedColumns": [
              "uid"
            ]
          }
        ]
      }
    ],
    "views": [
      {
        "viewName": "EventTypeDetail",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT event_type_name as eventTypeName, CountedEventType.uid, CountedEventType.event_type_description as description, CountedEventType.createdAt as eventTypeCreated, SUM(CountedEvent.increment) as netScore, COUNT(*) as voteCount, MAX(CountedEvent.createdAt) as lastUpdated, SUM(CASE increment WHEN 1 THEN 1 ELSE 0 END) as incrementCount, SUM(CASE increment WHEN -1 THEN 1 ELSE 0 END) as decrementCount  FROM CountedEventType LEFT JOIN CountedEvent ON CountedEvent.countedEventTypeId = CountedEventType.uid GROUP BY CountedEventType.uid"
      },
      {
        "viewName": "VoteEntryModel",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT CountedEventType.uid , CountedEventType.event_type_name as eventTypeName , CountedEventType.createdAt as typeCreatedAt, CountedEvent.createdAt as votedOn, CountedEvent.increment  FROM CountedEventType INNER JOIN CountedEvent ON CountedEvent.countedEventTypeId = CountedEventType.uid"
      }
    ],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, 'a1b6624ba4859b91d6e54e2488a3cba1')"
    ]
  }
}